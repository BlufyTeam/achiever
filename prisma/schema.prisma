// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


enum Role {
  USER
  ADMIN
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  role          Role     @default(USER) // ðŸ‘ˆ NEW

  medals        UserMedal[]
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Medal {
  id          String        @id @default(cuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  categories  CategoryMedal[] // ðŸ‘ˆ many-to-many with categories
  users       UserMedal[]     // ðŸ‘ˆ many-to-many with users
}

model Category {
  id        String          @id @default(cuid())
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  medals    CategoryMedal[] // ðŸ‘ˆ many-to-many with medals
}

model UserMedal {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  medal   Medal  @relation(fields: [medalId], references: [id])
  medalId String

  earnedAt DateTime @default(now())

  @@id([userId, medalId]) // composite primary key
}

model CategoryMedal {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  medal   Medal @relation(fields: [medalId], references: [id])
  medalId String

  @@id([categoryId, medalId]) // composite primary key
}
